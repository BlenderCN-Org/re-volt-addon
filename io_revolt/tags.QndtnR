imp	carinfo.py	/^    import imp$/;"	i
os	carinfo.py	/^import os$/;"	i
bpy	carinfo.py	/^import bpy$/;"	i
common	carinfo.py	/^from . import common$/;"	i
action_name	carinfo.py	/^action_name = "reading parameters"$/;"	v
block	carinfo.py	/^block = None$/;"	v
read_word	carinfo.py	/^def read_word(fd):$/;"	f
read_model	carinfo.py	/^def read_model(fd):$/;"	f
read_int	carinfo.py	/^def read_int(fd):$/;"	f
read_bool	carinfo.py	/^def read_bool(fd):$/;"	f
read_float	carinfo.py	/^def read_float(fd):$/;"	f
read_vector_float	carinfo.py	/^def read_vector_float(fd):$/;"	f
read_quintuple_float	carinfo.py	/^def read_quintuple_float(fd):$/;"	f
read_3x3_float	carinfo.py	/^def read_3x3_float(fd):$/;"	f
read_vector_int	carinfo.py	/^def read_vector_int(fd):$/;"	f
read_string	carinfo.py	/^def read_string(fd):$/;"	f
read_path	carinfo.py	/^def read_path(fd):$/;"	f
read_ambivalent	carinfo.py	/^def read_ambivalent(fd):$/;"	f
read_number_list	carinfo.py	/^def read_number_list(fd):$/;"	f
read_struct	carinfo.py	/^def read_struct(fd):$/;"	f
read_struct_numbered	carinfo.py	/^def read_struct_numbered(fd):$/;"	f
process_words	carinfo.py	/^def process_words(fd):$/;"	f
skip_line	carinfo.py	/^def skip_line(fd):$/;"	f
is_space	carinfo.py	/^def is_space(ch):$/;"	f
dispatcher	carinfo.py	/^dispatcher = {$/;"	v
read_parameters	carinfo.py	/^def read_parameters(filepath):$/;"	f
test	carinfo.py	/^def test():$/;"	f
imp	fin_in.py	/^    import imp$/;"	i
bpy	fin_in.py	/^import bpy$/;"	i
bmesh	fin_in.py	/^import bmesh$/;"	i
mathutils	fin_in.py	/^import mathutils$/;"	i
common	fin_in.py	/^from . import common$/;"	i
rvstruct	fin_in.py	/^from . import rvstruct$/;"	i
prm_in	fin_in.py	/^from . import prm_in$/;"	i
Instances	fin_in.py	/^from .rvstruct import Instances, Vector$/;"	i
Vector	fin_in.py	/^from .rvstruct import Instances, Vector$/;"	i
Color	fin_in.py	/^from mathutils import Color$/;"	i
import_file	fin_in.py	/^def import_file(filepath, scene):$/;"	f
import_instance	fin_in.py	/^def import_instance(filepath, scene, instance):$/;"	f
imp	fin_out.py	/^    import imp$/;"	i
bpy	fin_out.py	/^import bpy$/;"	i
bmesh	fin_out.py	/^import bmesh$/;"	i
mathutils	fin_out.py	/^import mathutils$/;"	i
common	fin_out.py	/^from . import common$/;"	i
rvstruct	fin_out.py	/^from . import rvstruct$/;"	i
prm_out	fin_out.py	/^from . import prm_out$/;"	i
Instances	fin_out.py	/^from .rvstruct import Instances, Instance, Vector, Color$/;"	i
Instance	fin_out.py	/^from .rvstruct import Instances, Instance, Vector, Color$/;"	i
Vector	fin_out.py	/^from .rvstruct import Instances, Instance, Vector, Color$/;"	i
Color	fin_out.py	/^from .rvstruct import Instances, Instance, Vector, Color$/;"	i
export_file	fin_out.py	/^def export_file(filepath, scene):$/;"	f
imp	hul_in.py	/^    import imp$/;"	i
bpy	hul_in.py	/^import bpy$/;"	i
bmesh	hul_in.py	/^import bmesh$/;"	i
mathutils	hul_in.py	/^import mathutils$/;"	i
common	hul_in.py	/^from . import common$/;"	i
rvstruct	hul_in.py	/^from . import rvstruct$/;"	i
prm_in	hul_in.py	/^from . import prm_in$/;"	i
Hull	hul_in.py	/^from .rvstruct import Hull$/;"	i
Color	hul_in.py	/^from mathutils import Color, Vector$/;"	i
Vector	hul_in.py	/^from mathutils import Color, Vector$/;"	i
get_plane	hul_in.py	/^def get_plane(x, y, z):$/;"	f
import_hull	hul_in.py	/^def import_hull(filepath, scene):$/;"	f
import_chull	hul_in.py	/^def import_chull(chull, scene, filename):$/;"	f
import_file	hul_in.py	/^def import_file(filepath, scene):$/;"	f
bpy	img_in.py	/^import bpy$/;"	i
os	img_in.py	/^import os$/;"	i
load_image	img_in.py	/^def load_image(filepath):$/;"	f
import_file	img_in.py	/^def import_file(filepath):$/;"	f
bpy	layers.py	/^import bpy$/;"	i
mathutils	layers.py	/^import mathutils$/;"	i
color_from_face	layers.py	/^def color_from_face(context):$/;"	f
get_average_vcol0	layers.py	/^def get_average_vcol0(verts, layer):$/;"	f
get_average_vcol2	layers.py	/^def get_average_vcol2(faces, layer):$/;"	f
set_vcol	layers.py	/^def set_vcol(faces, layer, color):$/;"	f
set_vertex_color	layers.py	/^def set_vertex_color(context, number):$/;"	f
get_face_material	layers.py	/^def get_face_material(self):$/;"	f
set_face_material	layers.py	/^def set_face_material(self, value):$/;"	f
get_face_texture	layers.py	/^def get_face_texture(self):$/;"	f
set_face_texture	layers.py	/^def set_face_texture(self, value):$/;"	f
set_face_env	layers.py	/^def set_face_env(self, value):$/;"	f
get_face_env	layers.py	/^def get_face_env(self):$/;"	f
get_face_property	layers.py	/^def get_face_property(self):$/;"	f
set_face_property	layers.py	/^def set_face_property(self, value, mask):$/;"	f
get_face_ncp_property	layers.py	/^def get_face_ncp_property(self):$/;"	f
set_face_ncp_property	layers.py	/^def set_face_ncp_property(self, value, mask):$/;"	f
select_faces	layers.py	/^def select_faces(context, prop):$/;"	f
select_ncp_faces	layers.py	/^def select_ncp_faces(context, prop):$/;"	f
select_ncp_material	layers.py	/^def select_ncp_material(self, context):$/;"	f
imp	ncp_in.py	/^    import imp$/;"	i
bpy	ncp_in.py	/^import bpy$/;"	i
bmesh	ncp_in.py	/^import bmesh$/;"	i
mathutils	ncp_in.py	/^import mathutils$/;"	i
common	ncp_in.py	/^from . import common$/;"	i
rvstruct	ncp_in.py	/^from . import rvstruct$/;"	i
NCP	ncp_in.py	/^from .rvstruct import NCP, Vector$/;"	i
Vector	ncp_in.py	/^from .rvstruct import NCP, Vector$/;"	i
Color	ncp_in.py	/^from mathutils import Color$/;"	i
intersect	ncp_in.py	/^def intersect(d1, n1, d2, n2, d3, n3):$/;"	f
import_file	ncp_in.py	/^def import_file(filepath, scene):$/;"	f
imp	parameters_in.py	/^    import imp$/;"	i
os	parameters_in.py	/^import os$/;"	i
bpy	parameters_in.py	/^import bpy$/;"	i
bmesh	parameters_in.py	/^import bmesh$/;"	i
Vector	parameters_in.py	/^from mathutils import Vector$/;"	i
common	parameters_in.py	/^from . import common$/;"	i
carinfo	parameters_in.py	/^from . import carinfo$/;"	i
prm_in	parameters_in.py	/^from . import prm_in$/;"	i
import_file	parameters_in.py	/^def import_file(filepath, scene):$/;"	f
import_car	parameters_in.py	/^def import_car(scene, params, filepath):$/;"	f
imp	prm_in.py	/^    import imp$/;"	i
os	prm_in.py	/^import os$/;"	i
bpy	prm_in.py	/^import bpy$/;"	i
bmesh	prm_in.py	/^import bmesh$/;"	i
Color	prm_in.py	/^from mathutils import Color, Vector$/;"	i
Vector	prm_in.py	/^from mathutils import Color, Vector$/;"	i
common	prm_in.py	/^from . import common$/;"	i
rvstruct	prm_in.py	/^from . import rvstruct$/;"	i
img_in	prm_in.py	/^from . import img_in$/;"	i
PRM	prm_in.py	/^from .rvstruct import PRM$/;"	i
import_file	prm_in.py	/^def import_file(filepath, scene):$/;"	f
import_mesh	prm_in.py	/^def import_mesh(prm, scene, filepath, envlist=None):$/;"	f
add_rvmesh_to_bmesh	prm_in.py	/^def add_rvmesh_to_bmesh(prm, bm, filepath, envlist=None):$/;"	f
imp	prm_out.py	/^    import imp$/;"	i
os	prm_out.py	/^import os$/;"	i
bpy	prm_out.py	/^import bpy$/;"	i
bmesh	prm_out.py	/^import bmesh$/;"	i
Color	prm_out.py	/^from mathutils import Color, Vector, Matrix$/;"	i
Vector	prm_out.py	/^from mathutils import Color, Vector, Matrix$/;"	i
Matrix	prm_out.py	/^from mathutils import Color, Vector, Matrix$/;"	i
common	prm_out.py	/^from . import common$/;"	i
rvstruct	prm_out.py	/^from . import rvstruct$/;"	i
img_in	prm_out.py	/^from . import img_in$/;"	i
layers	prm_out.py	/^from . import layers$/;"	i
export_file	prm_out.py	/^def export_file(filepath, scene):$/;"	f
export_mesh	prm_out.py	/^def export_mesh(me, obj, scene, filepath, world=None):$/;"	f
bpy	props_mesh.py	/^import bpy$/;"	i
RVMeshProperties	props_mesh.py	/^class RVMeshProperties(bpy.types.PropertyGroup):$/;"	c
face_material	props_mesh.py	/^    face_material = EnumProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Material",$/;"	v	class:RVMeshProperties
items	props_mesh.py	/^        items = MATERIALS,$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get = get_face_material,$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set = set_face_material,$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description = "Surface Material"$/;"	v	class:RVMeshProperties
face_texture	props_mesh.py	/^    face_texture = IntProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Texture",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get = get_face_texture,$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set = set_face_texture,$/;"	v	class:RVMeshProperties
default	props_mesh.py	/^        default = 0,$/;"	v	class:RVMeshProperties
min	props_mesh.py	/^        min = -1,$/;"	v	class:RVMeshProperties
max	props_mesh.py	/^        max = 9,$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description = "Texture page number:\\n-1 is none,\\n"$/;"	v	class:RVMeshProperties
face_double_sided	props_mesh.py	/^    face_double_sided = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Double sided",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get = lambda s: bool(get_face_property(s) & FACE_DOUBLE),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set = lambda s, v: set_face_property(s, v, FACE_DOUBLE),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description = "The polygon will be visible from both sides in-game"$/;"	v	class:RVMeshProperties
face_translucent	props_mesh.py	/^    face_translucent = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Translucent",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get = lambda s: bool(get_face_property(s) & FACE_TRANSLUCENT),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set = lambda s, v: set_face_property(s, v, FACE_TRANSLUCENT),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description = "Renders the polyon transparent\\n(takes transparency "$/;"	v	class:RVMeshProperties
face_mirror	props_mesh.py	/^    face_mirror = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Mirror",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get = lambda s: bool(get_face_property(s) & FACE_MIRROR),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set = lambda s, v: set_face_property(s, v, FACE_MIRROR),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description = "This polygon covers a mirror area. (?)"$/;"	v	class:RVMeshProperties
face_additive	props_mesh.py	/^    face_additive = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Additive blending",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get = lambda s: bool(get_face_property(s) & FACE_TRANSL_TYPE),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set = lambda s, v: set_face_property(s, v, FACE_TRANSL_TYPE),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description = "Renders the polygon with additive blending (black "$/;"	v	class:RVMeshProperties
face_texture_animation	props_mesh.py	/^    face_texture_animation = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Animated",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get = lambda s: bool(get_face_property(s) & FACE_TEXANIM),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set = lambda s, v: set_face_property(s, v, FACE_TEXANIM),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description = "Uses texture animation for this poly (only in .w files)"$/;"	v	class:RVMeshProperties
face_no_envmapping	props_mesh.py	/^    face_no_envmapping = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "No EnvMap (.prm)",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get = lambda s: bool(get_face_property(s) & FACE_NOENV),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set = lambda s, v: set_face_property(s, v, FACE_NOENV),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description = "Disables the environment map for this poly (.prm only)"$/;"	v	class:RVMeshProperties
face_envmapping	props_mesh.py	/^    face_envmapping = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "EnvMapping (.w)",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get = lambda s: bool(get_face_property(s) & FACE_ENV),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set = lambda s, v: set_face_property(s, v, FACE_ENV),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description = "Enables the environment map for this poly (.w only).\\n\\n"$/;"	v	class:RVMeshProperties
face_cloth	props_mesh.py	/^    face_cloth = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Cloth effect (.prm)",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get = lambda s: bool(get_face_property(s) & FACE_CLOTH),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set = lambda s, v: set_face_property(s, v, FACE_CLOTH),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description = "Enables the cloth effect used on the Mystery car"$/;"	v	class:RVMeshProperties
face_skip	props_mesh.py	/^    face_skip = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Do not export",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get = lambda s: bool(get_face_property(s) & FACE_SKIP),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set = lambda s, v: set_face_property(s, v, FACE_SKIP),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description = "Skips the polygon when exporting (not Re-Volt related)"$/;"	v	class:RVMeshProperties
face_env	props_mesh.py	/^    face_env = FloatVectorProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Environment Color",$/;"	v	class:RVMeshProperties
subtype	props_mesh.py	/^        subtype = "COLOR",$/;"	v	class:RVMeshProperties
size	props_mesh.py	/^        size = 4,$/;"	v	class:RVMeshProperties
min	props_mesh.py	/^        min = 0.0,$/;"	v	class:RVMeshProperties
max	props_mesh.py	/^        max = 1.0,$/;"	v	class:RVMeshProperties
soft_min	props_mesh.py	/^        soft_min = 0.0,$/;"	v	class:RVMeshProperties
soft_max	props_mesh.py	/^        soft_max = 1.0,$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get = get_face_env,$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set = set_face_env,$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description = "Color of the environment map for World meshes"$/;"	v	class:RVMeshProperties
face_ncp_double	props_mesh.py	/^    face_ncp_double = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Double-sided",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get=lambda s: bool(get_face_ncp_property(s) & NCP_DOUBLE),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set=lambda s, v: set_face_ncp_property(s, v, NCP_DOUBLE),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description="Enables double-sided collision"$/;"	v	class:RVMeshProperties
face_ncp_object_only	props_mesh.py	/^    face_ncp_object_only = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Object Only",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get=lambda s: bool(get_face_ncp_property(s) & NCP_OBJECT_ONLY),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set=lambda s, v: set_face_ncp_property(s, v, NCP_OBJECT_ONLY),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description="Enable collision for objects only (ignores camera)"$/;"	v	class:RVMeshProperties
face_ncp_camera_only	props_mesh.py	/^    face_ncp_camera_only = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Camera Only",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get=lambda s: bool(get_face_ncp_property(s) & NCP_CAMERA_ONLY),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set=lambda s, v: set_face_ncp_property(s, v, NCP_CAMERA_ONLY),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description="Enable collision for camera only"$/;"	v	class:RVMeshProperties
face_ncp_non_planar	props_mesh.py	/^    face_ncp_non_planar = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Non-planar",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get=lambda s: bool(get_face_ncp_property(s) & NCP_NON_PLANAR),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set=lambda s, v: set_face_ncp_property(s, v, NCP_NON_PLANAR),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description="Face is non-planar"$/;"	v	class:RVMeshProperties
face_ncp_no_skid	props_mesh.py	/^    face_ncp_no_skid = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "No Skid Marks",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get=lambda s: bool(get_face_ncp_property(s) & NCP_NO_SKID),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set=lambda s, v: set_face_ncp_property(s, v, NCP_NO_SKID),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description="Disable skid marks"$/;"	v	class:RVMeshProperties
face_ncp_oil	props_mesh.py	/^    face_ncp_oil = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "Oil",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get=lambda s: bool(get_face_ncp_property(s) & NCP_OIL),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set=lambda s, v: set_face_ncp_property(s, v, NCP_OIL),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description="Ground is oil"$/;"	v	class:RVMeshProperties
face_ncp_nocoll	props_mesh.py	/^    face_ncp_nocoll = BoolProperty($/;"	v	class:RVMeshProperties
name	props_mesh.py	/^        name = "No Collision",$/;"	v	class:RVMeshProperties
get	props_mesh.py	/^        get=lambda s: bool(get_face_ncp_property(s) & NCP_NOCOLL),$/;"	v	class:RVMeshProperties
set	props_mesh.py	/^        set=lambda s, v: set_face_ncp_property(s, v, NCP_NOCOLL),$/;"	v	class:RVMeshProperties
description	props_mesh.py	/^        description="Face will be ignored when exporting"$/;"	v	class:RVMeshProperties
bpy	props_obj.py	/^import bpy$/;"	i
RVObjectProperties	props_obj.py	/^class RVObjectProperties(bpy.types.PropertyGroup):$/;"	c
is_bcube	props_obj.py	/^    is_bcube = BoolProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name = "Object is a BigCube",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default = False,$/;"	v	class:RVObjectProperties
description	props_obj.py	/^        description = "Makes BigCube properties visible for this object"$/;"	v	class:RVObjectProperties
is_cube	props_obj.py	/^    is_cube = BoolProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name = "Object is a Cube",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default = False,$/;"	v	class:RVObjectProperties
description	props_obj.py	/^        description = "Makes Cube properties visible for this object"$/;"	v	class:RVObjectProperties
is_bbox	props_obj.py	/^    is_bbox = BoolProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name = "Object is a Boundary Box",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default = False,$/;"	v	class:RVObjectProperties
description	props_obj.py	/^        description = "Makes BoundBox properties visible for this object"$/;"	v	class:RVObjectProperties
ignore_ncp	props_obj.py	/^    ignore_ncp = BoolProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name = "Ignore Collision (.ncp)",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default = False,$/;"	v	class:RVObjectProperties
description	props_obj.py	/^        description = "Ignores the object when exporting to NCP"$/;"	v	class:RVObjectProperties
bcube_mesh_indices	props_obj.py	/^    bcube_mesh_indices = StringProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name = "Mesh indices",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default = "",$/;"	v	class:RVObjectProperties
description	props_obj.py	/^        description = "Indices of child meshes"$/;"	v	class:RVObjectProperties
is_instance	props_obj.py	/^    is_instance = BoolProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name = "Is Instance",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default = False,$/;"	v	class:RVObjectProperties
description	props_obj.py	/^        description = "Object is an instanced mesh"$/;"	v	class:RVObjectProperties
fin_col	props_obj.py	/^    fin_col = FloatVectorProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^       name="Model Color",$/;"	v	class:RVObjectProperties
subtype	props_obj.py	/^       subtype='COLOR',$/;"	v	class:RVObjectProperties
default	props_obj.py	/^       default=(1.0, 1.0, 1.0),$/;"	v	class:RVObjectProperties
description	props_obj.py	/^       description=""$/;"	v	class:RVObjectProperties
fin_envcol	props_obj.py	/^    fin_envcol = FloatVectorProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^       name="Env Color",$/;"	v	class:RVObjectProperties
subtype	props_obj.py	/^       subtype='COLOR',$/;"	v	class:RVObjectProperties
default	props_obj.py	/^       default=(1.0, 1.0, 1.0, 1.0),$/;"	v	class:RVObjectProperties
description	props_obj.py	/^       description="Color of the EnvMap",$/;"	v	class:RVObjectProperties
size	props_obj.py	/^       size=4$/;"	v	class:RVObjectProperties
fin_priority	props_obj.py	/^    fin_priority = IntProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name="Priority",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default=1$/;"	v	class:RVObjectProperties
fin_env	props_obj.py	/^    fin_env = BoolProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name="Use Environment Map",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default=True$/;"	v	class:RVObjectProperties
fin_model_rgb	props_obj.py	/^    fin_model_rgb = BoolProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name="Use Model Color",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default=False$/;"	v	class:RVObjectProperties
fin_hide	props_obj.py	/^    fin_hide = BoolProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name="Hide",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default=False$/;"	v	class:RVObjectProperties
fin_no_mirror	props_obj.py	/^    fin_no_mirror = BoolProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name="Don't show in Mirror Mode",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default=False$/;"	v	class:RVObjectProperties
fin_no_lights	props_obj.py	/^    fin_no_lights = BoolProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name="Is affected by Light",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default=False$/;"	v	class:RVObjectProperties
fin_no_cam_coll	props_obj.py	/^    fin_no_cam_coll = BoolProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name="No Camera Collision",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default=False$/;"	v	class:RVObjectProperties
fin_no_obj_coll	props_obj.py	/^    fin_no_obj_coll = BoolProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name="No Object Collision",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default=False$/;"	v	class:RVObjectProperties
fin_lod_bias	props_obj.py	/^    fin_lod_bias = IntProperty($/;"	v	class:RVObjectProperties
name	props_obj.py	/^        name="LoD Bias",$/;"	v	class:RVObjectProperties
default	props_obj.py	/^        default = 1024$/;"	v	class:RVObjectProperties
bpy	props_scene.py	/^import bpy$/;"	i
RVSceneProperties	props_scene.py	/^class RVSceneProperties(bpy.types.PropertyGroup):$/;"	c
face_edit_mode	props_scene.py	/^    face_edit_mode = EnumProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Face Edit Mode",$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Select the Edit Mode",$/;"	v	class:RVSceneProperties
items	props_scene.py	/^        items=($/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = "prm"$/;"	v	class:RVSceneProperties
select_material	props_scene.py	/^    select_material = EnumProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Select Material",$/;"	v	class:RVSceneProperties
items	props_scene.py	/^        items = MATERIALS,$/;"	v	class:RVSceneProperties
update	props_scene.py	/^        update = select_ncp_material,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Selects all faces with the selected material"$/;"	v	class:RVSceneProperties
last_exported_filepath	props_scene.py	/^    last_exported_filepath = StringProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Last Exported Filepath",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = ""$/;"	v	class:RVSceneProperties
enable_tex_mode	props_scene.py	/^    enable_tex_mode = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Texture Mode after Import",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = True,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Enables Texture Mode after mesh import"$/;"	v	class:RVSceneProperties
prefer_tex_solid_mode	props_scene.py	/^    prefer_tex_solid_mode = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Prefer Textured Solid Mode",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = False,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Prefer Textured Solid mode instead of Texture mode for "$/;"	v	class:RVSceneProperties
vertex_color_picker	props_scene.py	/^    vertex_color_picker = FloatVectorProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Object Color",$/;"	v	class:RVSceneProperties
subtype	props_scene.py	/^        subtype = 'COLOR',$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = (0, 0, 1.0),$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Color picker for painting custom vertex colors"$/;"	v	class:RVSceneProperties
envidx	props_scene.py	/^    envidx = IntProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "envidx",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = 0,$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Current env color index for importing. Internal only"$/;"	v	class:RVSceneProperties
rename_all_name	props_scene.py	/^    rename_all_name = StringProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Rename",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = "example.prm",$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Enter a new name for the selected objects"$/;"	v	class:RVSceneProperties
revolt_dir	props_scene.py	/^    revolt_dir = StringProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Re-Volt Directory",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = "",$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Manually define a Re-Volt installation for loading "$/;"	v	class:RVSceneProperties
batch_bake_model_rgb	props_scene.py	/^    batch_bake_model_rgb = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Bake to Model RGB",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = True,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Bake scene lighting to Instance model RGB"$/;"	v	class:RVSceneProperties
batch_bake_model_env	props_scene.py	/^    batch_bake_model_env = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Bake to Model Env",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = True,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Bake scene lighting to Instance model environment color"$/;"	v	class:RVSceneProperties
triangulate_ngons	props_scene.py	/^    triangulate_ngons = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Triangulate n-gons",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = True,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Triangulate n-gons when exporting.\\n"$/;"	v	class:RVSceneProperties
use_tex_num	props_scene.py	/^    use_tex_num = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Use Number for Textures",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = False,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Uses the texture number from the texture layer "$/;"	v	class:RVSceneProperties
apply_scale	props_scene.py	/^    apply_scale = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Apply Scale",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = True,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Applies the object scale on export"$/;"	v	class:RVSceneProperties
apply_rotation	props_scene.py	/^    apply_rotation = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Apply Rotation",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = True,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Applies the object rotation on export"$/;"	v	class:RVSceneProperties
w_parent_meshes	props_scene.py	/^    w_parent_meshes = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Parent .w meshes to Empty",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = False,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Parents all .w meshes to an Empty object, resulting in "$/;"	v	class:RVSceneProperties
w_import_bound_boxes	props_scene.py	/^    w_import_bound_boxes = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Import Bound Boxes",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = False,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Imports the boundary box of each .w mesh for debugging "$/;"	v	class:RVSceneProperties
w_bound_box_layers	props_scene.py	/^    w_bound_box_layers = BoolVectorProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Bound Box Layers",$/;"	v	class:RVSceneProperties
subtype	props_scene.py	/^        subtype = "LAYER",$/;"	v	class:RVSceneProperties
size	props_scene.py	/^        size = 20,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = [True]+[False for x in range(0, 19)],$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Sets the layers the objecs will be be imported to. "$/;"	v	class:RVSceneProperties
w_import_cubes	props_scene.py	/^    w_import_cubes = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Import Cubes",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = False,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Imports the cube of each .w mesh for debugging "$/;"	v	class:RVSceneProperties
w_cube_layers	props_scene.py	/^    w_cube_layers = BoolVectorProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Cube Layers",$/;"	v	class:RVSceneProperties
subtype	props_scene.py	/^        subtype = "LAYER",$/;"	v	class:RVSceneProperties
size	props_scene.py	/^        size = 20,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = [True]+[False for x in range(0, 19)],$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Sets the layers the objecs will be be imported to. "$/;"	v	class:RVSceneProperties
w_import_big_cubes	props_scene.py	/^    w_import_big_cubes = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Import Big Cubes",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = False,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Imports Big Cubes for debugging purposes"$/;"	v	class:RVSceneProperties
w_big_cube_layers	props_scene.py	/^    w_big_cube_layers = BoolVectorProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Big Cube Layers",$/;"	v	class:RVSceneProperties
subtype	props_scene.py	/^        subtype = "LAYER",$/;"	v	class:RVSceneProperties
size	props_scene.py	/^        size = 20,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = [True]+[False for x in range(0, 19)],$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Sets the layers the objecs will be be imported to. "$/;"	v	class:RVSceneProperties
ncp_export_collgrid	props_scene.py	/^    ncp_export_collgrid = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Export Collision Grid (.w)",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = True,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Export a collision grid to the .ncp file:\\n\\n"$/;"	v	class:RVSceneProperties
ncp_collgrid_size	props_scene.py	/^    ncp_collgrid_size = IntProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Grid Size",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = 1024,$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 512,$/;"	v	class:RVSceneProperties
max	props_scene.py	/^        max = 8192,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Size of the lookup grid"$/;"	v	class:RVSceneProperties
ncp_export_selected	props_scene.py	/^    ncp_export_selected = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Only export selected",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = False,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Only exports the selected objects"$/;"	v	class:RVSceneProperties
light1	props_scene.py	/^    light1 = EnumProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Light 1",$/;"	v	class:RVSceneProperties
items	props_scene.py	/^        items = BAKE_LIGHTS,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = "SUN",$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Type of light"$/;"	v	class:RVSceneProperties
light2	props_scene.py	/^    light2 = EnumProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Light 2",$/;"	v	class:RVSceneProperties
items	props_scene.py	/^        items = BAKE_LIGHTS,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = "HEMI",$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Type of light"$/;"	v	class:RVSceneProperties
light_intensity1	props_scene.py	/^    light_intensity1 = FloatProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Intensity 1",$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0.0,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = 1.5,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Intensity of Light 1"$/;"	v	class:RVSceneProperties
light_intensity2	props_scene.py	/^    light_intensity2 = FloatProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Intensity 2",$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0.0,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = .05,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Intensity of Light 2"$/;"	v	class:RVSceneProperties
light_orientation	props_scene.py	/^    light_orientation = EnumProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Orientation",$/;"	v	class:RVSceneProperties
items	props_scene.py	/^        items = BAKE_LIGHT_ORIENTATIONS,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = "Z",$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Directions of the lights"$/;"	v	class:RVSceneProperties
shadow_method	props_scene.py	/^    shadow_method = EnumProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Method",$/;"	v	class:RVSceneProperties
items	props_scene.py	/^        items = BAKE_SHADOW_METHODS,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Default (Adaptive QMC):\\nFaster option, recommended "$/;"	v	class:RVSceneProperties
shadow_quality	props_scene.py	/^    shadow_quality = IntProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Quality",$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0,$/;"	v	class:RVSceneProperties
max	props_scene.py	/^        max = 32,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = 15,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "The amount of samples the shadow is rendered with "$/;"	v	class:RVSceneProperties
shadow_resolution	props_scene.py	/^    shadow_resolution = IntProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Resolution",$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 32,$/;"	v	class:RVSceneProperties
max	props_scene.py	/^        max = 8192,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = 128,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Texture resolution of the shadow.\\n"$/;"	v	class:RVSceneProperties
shadow_softness	props_scene.py	/^    shadow_softness = FloatProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Softness",$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0.0,$/;"	v	class:RVSceneProperties
max	props_scene.py	/^        max = 100.0,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = 1,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Softness of the shadow "$/;"	v	class:RVSceneProperties
shadow_table	props_scene.py	/^    shadow_table = StringProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Shadowtable",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = "",$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Shadow coordinates for use in parameters.txt of cars.\\n"$/;"	v	class:RVSceneProperties
texture_animations	props_scene.py	/^    texture_animations = StringProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Texture Animations",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = "[]",$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Storage for Texture animations. Should not be changed "$/;"	v	class:RVSceneProperties
ta_max_slots	props_scene.py	/^    ta_max_slots = IntProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Slots",$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0,$/;"	v	class:RVSceneProperties
max	props_scene.py	/^        max = 10,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = 0,$/;"	v	class:RVSceneProperties
update	props_scene.py	/^        update = update_ta_max_slots,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Total number of texture animation slots. "$/;"	v	class:RVSceneProperties
ta_current_slot	props_scene.py	/^    ta_current_slot = IntProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Animation",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = 0,$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0,$/;"	v	class:RVSceneProperties
max	props_scene.py	/^        max = 9,$/;"	v	class:RVSceneProperties
update	props_scene.py	/^        update = update_ta_current_slot,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Texture animation slot"$/;"	v	class:RVSceneProperties
ta_max_frames	props_scene.py	/^    ta_max_frames = IntProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Frames",$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 2,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = 2,$/;"	v	class:RVSceneProperties
update	props_scene.py	/^        update = update_ta_max_frames,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Total number of frames of the current slot. "$/;"	v	class:RVSceneProperties
ta_current_frame	props_scene.py	/^    ta_current_frame = IntProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Frame",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = 0,$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0,$/;"	v	class:RVSceneProperties
update	props_scene.py	/^        update = update_ta_current_frame,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Current frame"$/;"	v	class:RVSceneProperties
ta_current_frame_tex	props_scene.py	/^    ta_current_frame_tex = IntProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Texture",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = 0,$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = -1,$/;"	v	class:RVSceneProperties
max	props_scene.py	/^        max = 9,$/;"	v	class:RVSceneProperties
update	props_scene.py	/^        update = update_ta_current_frame_tex,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Texture of the current frame"$/;"	v	class:RVSceneProperties
ta_current_frame_delay	props_scene.py	/^    ta_current_frame_delay = FloatProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Duration",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = 0.01,$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0,$/;"	v	class:RVSceneProperties
update	props_scene.py	/^        update = update_ta_current_frame_delay,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Duration of the current frame"$/;"	v	class:RVSceneProperties
ta_current_frame_uv0	props_scene.py	/^    ta_current_frame_uv0 = FloatVectorProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "UV 0",$/;"	v	class:RVSceneProperties
size	props_scene.py	/^        size = 2,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = (0, 0),$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0.0,$/;"	v	class:RVSceneProperties
max	props_scene.py	/^        max = 1.0,$/;"	v	class:RVSceneProperties
update	props_scene.py	/^        update = lambda self, context: update_ta_current_frame_uv(context, 0),$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "UV coordinate of the first vertex"$/;"	v	class:RVSceneProperties
ta_current_frame_uv1	props_scene.py	/^    ta_current_frame_uv1 = FloatVectorProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "UV 1",$/;"	v	class:RVSceneProperties
size	props_scene.py	/^        size = 2,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = (0, 0),$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0.0,$/;"	v	class:RVSceneProperties
max	props_scene.py	/^        max = 1.0,$/;"	v	class:RVSceneProperties
update	props_scene.py	/^        update = lambda self, context: update_ta_current_frame_uv(context, 1),$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "UV coordinate of the second vertex"$/;"	v	class:RVSceneProperties
ta_current_frame_uv2	props_scene.py	/^    ta_current_frame_uv2 = FloatVectorProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "UV 2",$/;"	v	class:RVSceneProperties
size	props_scene.py	/^        size = 2,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = (0, 0),$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0.0,$/;"	v	class:RVSceneProperties
max	props_scene.py	/^        max = 1.0,$/;"	v	class:RVSceneProperties
update	props_scene.py	/^        update = lambda self, context: update_ta_current_frame_uv(context, 2),$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "UV coordinate of the third vertex"$/;"	v	class:RVSceneProperties
ta_current_frame_uv3	props_scene.py	/^    ta_current_frame_uv3 = FloatVectorProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "UV 3",$/;"	v	class:RVSceneProperties
size	props_scene.py	/^        size = 2,$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = (0, 0),$/;"	v	class:RVSceneProperties
min	props_scene.py	/^        min = 0.0,$/;"	v	class:RVSceneProperties
max	props_scene.py	/^        max = 1.0,$/;"	v	class:RVSceneProperties
update	props_scene.py	/^        update = lambda self, context: update_ta_current_frame_uv(context, 3),$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "UV coordinate of the fourth vertex"$/;"	v	class:RVSceneProperties
ta_sync_with_face	props_scene.py	/^    ta_sync_with_face = BoolProperty($/;"	v	class:RVSceneProperties
name	props_scene.py	/^        name = "Sync UV with Selection",$/;"	v	class:RVSceneProperties
default	props_scene.py	/^        default = False,$/;"	v	class:RVSceneProperties
description	props_scene.py	/^        description = "Updates the UV mapping of the currently selected face "$/;"	v	class:RVSceneProperties
imp	ta_csv_in.py	/^    import imp$/;"	i
common	ta_csv_in.py	/^from . import common$/;"	i
rvstruct	ta_csv_in.py	/^from . import rvstruct$/;"	i
import_file	ta_csv_in.py	/^def import_file(filepath, scene):$/;"	f
imp	ta_csv_out.py	/^    import imp$/;"	i
common	ta_csv_out.py	/^from . import common$/;"	i
texanim	ta_csv_out.py	/^from . import texanim$/;"	i
export_file	ta_csv_out.py	/^def export_file(filepath, scene):$/;"	f
imp	texanim.py	/^    import imp$/;"	i
bpy	texanim.py	/^import bpy$/;"	i
common	texanim.py	/^from . import common$/;"	i
rvstruct	texanim.py	/^from . import rvstruct$/;"	i
bpy	texanim.py	/^import bpy$/;"	i
ButtonCopyUvToFrame	texanim.py	/^class ButtonCopyUvToFrame(bpy.types.Operator):$/;"	c
bl_idname	texanim.py	/^    bl_idname = "texanim.copy_uv_to_frame"$/;"	v	class:ButtonCopyUvToFrame
bl_label	texanim.py	/^    bl_label = "UV to Frame"$/;"	v	class:ButtonCopyUvToFrame
bl_description	texanim.py	/^    bl_description = "Copies the UV coordinates of the currently selected face to the texture animation frame"$/;"	v	class:ButtonCopyUvToFrame
execute	texanim.py	/^    def execute(self, context):$/;"	m	class:ButtonCopyUvToFrame
ButtonCopyFrameToUv	texanim.py	/^class ButtonCopyFrameToUv(bpy.types.Operator):$/;"	c
bl_idname	texanim.py	/^    bl_idname = "texanim.copy_frame_to_uv"$/;"	v	class:ButtonCopyFrameToUv
bl_label	texanim.py	/^    bl_label = "Frame to UV"$/;"	v	class:ButtonCopyFrameToUv
bl_description	texanim.py	/^    bl_description = "Copies the UV coordinates of the frame to the currently selected face"$/;"	v	class:ButtonCopyFrameToUv
execute	texanim.py	/^    def execute(self, context):$/;"	m	class:ButtonCopyFrameToUv
PreviewNextFrame	texanim.py	/^class PreviewNextFrame(bpy.types.Operator):$/;"	c
bl_idname	texanim.py	/^    bl_idname = "texanim.prev_next"$/;"	v	class:PreviewNextFrame
bl_label	texanim.py	/^    bl_label = "Preview Next"$/;"	v	class:PreviewNextFrame
bl_description	texanim.py	/^    bl_description = "Loads the next frame and previews it on the selected face"$/;"	v	class:PreviewNextFrame
execute	texanim.py	/^    def execute(self, context):$/;"	m	class:PreviewNextFrame
PreviewPrevFrame	texanim.py	/^class PreviewPrevFrame(bpy.types.Operator):$/;"	c
bl_idname	texanim.py	/^    bl_idname = "texanim.prev_prev"$/;"	v	class:PreviewPrevFrame
bl_label	texanim.py	/^    bl_label = "Preview Previous"$/;"	v	class:PreviewPrevFrame
bl_description	texanim.py	/^    bl_description = "Loads the previous frame and previews it on the selected face"$/;"	v	class:PreviewPrevFrame
execute	texanim.py	/^    def execute(self, context):$/;"	m	class:PreviewPrevFrame
TexAnimTransform	texanim.py	/^class TexAnimTransform(bpy.types.Operator):$/;"	c
bl_idname	texanim.py	/^    bl_idname = "texanim.transform"$/;"	v	class:TexAnimTransform
bl_label	texanim.py	/^    bl_label = "Transform Animation"$/;"	v	class:TexAnimTransform
bl_description	texanim.py	/^    bl_description = "Creates a linear animation from one frame to another"$/;"	v	class:TexAnimTransform
frame_start	texanim.py	/^    frame_start = bpy.props.IntProperty($/;"	v	class:TexAnimTransform
name	texanim.py	/^        name = "Start Frame",$/;"	v	class:TexAnimTransform
description	texanim.py	/^        description = "Start frame of the animation",$/;"	v	class:TexAnimTransform
min	texanim.py	/^        min = 0$/;"	v	class:TexAnimTransform
frame_end	texanim.py	/^    frame_end = bpy.props.IntProperty($/;"	v	class:TexAnimTransform
name	texanim.py	/^        name = "End Frame",$/;"	v	class:TexAnimTransform
description	texanim.py	/^        description = "End frame of the animation",$/;"	v	class:TexAnimTransform
min	texanim.py	/^        min = 0,$/;"	v	class:TexAnimTransform
delay	texanim.py	/^    delay = bpy.props.FloatProperty($/;"	v	class:TexAnimTransform
name	texanim.py	/^        name = "Frame duration",$/;"	v	class:TexAnimTransform
description	texanim.py	/^        description = "Duration of every frame",$/;"	v	class:TexAnimTransform
min	texanim.py	/^        min = 0.0,$/;"	v	class:TexAnimTransform
default	texanim.py	/^        default = 0.02,$/;"	v	class:TexAnimTransform
texture	texanim.py	/^    texture = bpy.props.IntProperty($/;"	v	class:TexAnimTransform
name	texanim.py	/^        name = "Texture",$/;"	v	class:TexAnimTransform
default	texanim.py	/^        default = 0,$/;"	v	class:TexAnimTransform
min	texanim.py	/^        min = -1,$/;"	v	class:TexAnimTransform
max	texanim.py	/^        max = 9,$/;"	v	class:TexAnimTransform
description	texanim.py	/^        description = "Texture for every frame"$/;"	v	class:TexAnimTransform
execute	texanim.py	/^    def execute(self, context):$/;"	m	class:TexAnimTransform
invoke	texanim.py	/^    def invoke(self, context, event):$/;"	m	class:TexAnimTransform
draw	texanim.py	/^    def draw(self, context):$/;"	m	class:TexAnimTransform
TexAnimGrid	texanim.py	/^class TexAnimGrid(bpy.types.Operator):$/;"	c
bl_idname	texanim.py	/^    bl_idname = "texanim.grid"$/;"	v	class:TexAnimGrid
bl_label	texanim.py	/^    bl_label = "Grid Animation"$/;"	v	class:TexAnimGrid
bl_description	texanim.py	/^    bl_description = "Creates an animation based on a grid texture."$/;"	v	class:TexAnimGrid
frame_start	texanim.py	/^    frame_start = bpy.props.IntProperty($/;"	v	class:TexAnimGrid
name	texanim.py	/^        name = "Start Frame",$/;"	v	class:TexAnimGrid
min	texanim.py	/^        min = 0,$/;"	v	class:TexAnimGrid
description	texanim.py	/^        description = "Start frame of the animation"$/;"	v	class:TexAnimGrid
grid_x	texanim.py	/^    grid_x = bpy.props.IntProperty($/;"	v	class:TexAnimGrid
name	texanim.py	/^        name = "X Resolution",$/;"	v	class:TexAnimGrid
min	texanim.py	/^        min = 1,$/;"	v	class:TexAnimGrid
default	texanim.py	/^        default = 2,$/;"	v	class:TexAnimGrid
description	texanim.py	/^        description = "Amount of frames along the X axis"$/;"	v	class:TexAnimGrid
grid_y	texanim.py	/^    grid_y = bpy.props.IntProperty($/;"	v	class:TexAnimGrid
name	texanim.py	/^        name = "Y Resolution",$/;"	v	class:TexAnimGrid
min	texanim.py	/^        min = 1,$/;"	v	class:TexAnimGrid
default	texanim.py	/^        default = 2,$/;"	v	class:TexAnimGrid
description	texanim.py	/^        description = "Amount of frames along the Y axis"$/;"	v	class:TexAnimGrid
delay	texanim.py	/^    delay = bpy.props.FloatProperty($/;"	v	class:TexAnimGrid
name	texanim.py	/^        name = "Frame duration",$/;"	v	class:TexAnimGrid
description	texanim.py	/^        description = "Duration of every frame",$/;"	v	class:TexAnimGrid
min	texanim.py	/^        min = 0.0,$/;"	v	class:TexAnimGrid
default	texanim.py	/^        default = 0.02,$/;"	v	class:TexAnimGrid
texture	texanim.py	/^    texture = bpy.props.IntProperty($/;"	v	class:TexAnimGrid
name	texanim.py	/^        name = "Texture",$/;"	v	class:TexAnimGrid
default	texanim.py	/^        default = 0,$/;"	v	class:TexAnimGrid
min	texanim.py	/^        min = -1,$/;"	v	class:TexAnimGrid
max	texanim.py	/^        max = 9,$/;"	v	class:TexAnimGrid
description	texanim.py	/^        description = "Texture for every frame"$/;"	v	class:TexAnimGrid
execute	texanim.py	/^    def execute(self, context):$/;"	m	class:TexAnimGrid
invoke	texanim.py	/^    def invoke(self, context, event):$/;"	m	class:TexAnimGrid
draw	texanim.py	/^    def draw(self, context):$/;"	m	class:TexAnimGrid
update_ta_max_slots	texanim.py	/^def update_ta_max_slots(self, context):$/;"	f
update_ta_max_frames	texanim.py	/^def update_ta_max_frames(self, context):$/;"	f
update_ta_current_slot	texanim.py	/^def update_ta_current_slot(self, context):$/;"	f
update_ta_current_frame	texanim.py	/^def update_ta_current_frame(self, context):$/;"	f
update_ta_current_frame_tex	texanim.py	/^def update_ta_current_frame_tex(self, context):$/;"	f
update_ta_current_frame_delay	texanim.py	/^def update_ta_current_frame_delay(self, context):$/;"	f
update_ta_current_frame_uv	texanim.py	/^def update_ta_current_frame_uv(context, num):$/;"	f
copy_uv_to_frame	texanim.py	/^def copy_uv_to_frame(context):$/;"	f
copy_frame_to_uv	texanim.py	/^def copy_frame_to_uv(context):$/;"	f
os	w_in.py	/^import os$/;"	i
bpy	w_in.py	/^import bpy$/;"	i
bmesh	w_in.py	/^import bmesh$/;"	i
Color	w_in.py	/^from mathutils import Color, Vector$/;"	i
Vector	w_in.py	/^from mathutils import Color, Vector$/;"	i
common	w_in.py	/^from . import common$/;"	i
rvstruct	w_in.py	/^from . import rvstruct$/;"	i
img_in	w_in.py	/^from . import img_in$/;"	i
prm_in	w_in.py	/^from . import prm_in$/;"	i
World	w_in.py	/^from .rvstruct import World$/;"	i
import_mesh	w_in.py	/^from .prm_in import import_mesh$/;"	i
imp	w_in.py	/^    import imp$/;"	i
import_file	w_in.py	/^def import_file(filepath, scene):$/;"	f
create_bound_box	w_in.py	/^def create_bound_box(scene, bbox, filename):$/;"	f
create_cube	w_in.py	/^def create_cube(scene, sptype, center, radius, filename):$/;"	f
imp	w_out.py	/^    import imp$/;"	i
os	w_out.py	/^import os$/;"	i
bpy	w_out.py	/^import bpy$/;"	i
bmesh	w_out.py	/^import bmesh$/;"	i
Color	w_out.py	/^from mathutils import Color, Vector$/;"	i
Vector	w_out.py	/^from mathutils import Color, Vector$/;"	i
export_mesh	w_out.py	/^from .prm_out import export_mesh$/;"	i
export_file	w_out.py	/^def export_file(filepath, scene):$/;"	f
os	rvstruct.py	/^import os$/;"	i
struct	rvstruct.py	/^import struct$/;"	i
ceil	rvstruct.py	/^from math import ceil, sqrt$/;"	i
sqrt	rvstruct.py	/^from math import ceil, sqrt$/;"	i
World	rvstruct.py	/^class World:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:World
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:World
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:World
generate_bigcubes	rvstruct.py	/^    def generate_bigcubes(self):$/;"	m	class:World
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:World	file:
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:World
PRM	rvstruct.py	/^class PRM:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:PRM
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:PRM	file:
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:PRM
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:PRM
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:PRM
Mesh	rvstruct.py	/^class Mesh:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None, w=None):$/;"	m	class:Mesh
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:Mesh	file:
from_prm	rvstruct.py	/^    def from_prm(self, prm):$/;"	m	class:Mesh
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Mesh
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Mesh
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:Mesh
BoundingBox	rvstruct.py	/^class BoundingBox:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None, data=None):$/;"	m	class:BoundingBox
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:BoundingBox	file:
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:BoundingBox
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:BoundingBox
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:BoundingBox
Vector	rvstruct.py	/^class Vector:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None, data=None):$/;"	m	class:Vector
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Vector
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Vector
get_distance_to	rvstruct.py	/^    def get_distance_to(self, v):$/;"	m	class:Vector
scalar	rvstruct.py	/^    def scalar(self, v):$/;"	m	class:Vector
dot	rvstruct.py	/^    dot = scalar$/;"	v	class:Vector
cross	rvstruct.py	/^    def cross(self, v):$/;"	m	class:Vector
scale	rvstruct.py	/^    def scale(self, a):$/;"	m	class:Vector
magnitude	rvstruct.py	/^    def magnitude(self):$/;"	m	class:Vector
normalize	rvstruct.py	/^    def normalize(self):$/;"	m	class:Vector
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:Vector
__add__	rvstruct.py	/^    def __add__(self, v):$/;"	m	class:Vector	file:
__sub__	rvstruct.py	/^    def __sub__(self, v):$/;"	m	class:Vector	file:
__truediv__	rvstruct.py	/^    def __truediv__(self, a):$/;"	m	class:Vector	file:
__mul__	rvstruct.py	/^    def __mul__(self, a):$/;"	m	class:Vector	file:
__rmul__	rvstruct.py	/^    __rmul__ = __mul__$/;"	v	class:Vector
__iter__	rvstruct.py	/^    def __iter__(self):$/;"	m	class:Vector	file:
__getitem__	rvstruct.py	/^    def __getitem__(self, i):$/;"	m	class:Vector	file:
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:Vector	file:
__len__	rvstruct.py	/^    def __len__(self):$/;"	m	class:Vector	file:
__setitem__	rvstruct.py	/^    def __setitem__(self, i, value):$/;"	m	class:Vector	file:
x	rvstruct.py	/^    def x(self):$/;"	m	class:Vector
y	rvstruct.py	/^    def y(self):$/;"	m	class:Vector
z	rvstruct.py	/^    def z(self):$/;"	m	class:Vector
Matrix	rvstruct.py	/^class Matrix:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None, data=None):$/;"	m	class:Matrix
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:Matrix	file:
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Matrix
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Matrix
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:Matrix
__iter__	rvstruct.py	/^    def __iter__(self):$/;"	m	class:Matrix	file:
__getitem__	rvstruct.py	/^    def __getitem__(self, i):$/;"	m	class:Matrix	file:
__setitem__	rvstruct.py	/^    def __setitem__(self, i, value):$/;"	m	class:Matrix	file:
Polygon	rvstruct.py	/^class Polygon:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None, w=None):$/;"	m	class:Polygon
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:Polygon	file:
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Polygon
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Polygon
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:Polygon
Vertex	rvstruct.py	/^class Vertex:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:Vertex
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:Vertex	file:
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Vertex
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Vertex
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:Vertex
UV	rvstruct.py	/^class UV:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None, uv=None):$/;"	m	class:UV
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:UV	file:
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:UV
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:UV
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:UV
from_dict	rvstruct.py	/^    def from_dict(self, dic):$/;"	m	class:UV
BigCube	rvstruct.py	/^class BigCube:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:BigCube
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:BigCube	file:
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:BigCube
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:BigCube
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:BigCube
TexAnimation	rvstruct.py	/^class TexAnimation:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:TexAnimation
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:TexAnimation	file:
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:TexAnimation
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:TexAnimation
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:TexAnimation
from_dict	rvstruct.py	/^    def from_dict(self, dic):$/;"	m	class:TexAnimation
Frame	rvstruct.py	/^class Frame:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:Frame
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:Frame	file:
__str__	rvstruct.py	/^    def __str__(self):$/;"	m	class:Frame	file:
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Frame
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Frame
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:Frame
from_dict	rvstruct.py	/^    def from_dict(self, dic):$/;"	m	class:Frame
Color	rvstruct.py	/^class Color:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None, color=(0, 0, 0), alpha=False):$/;"	m	class:Color
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Color
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Color
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:Color
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:Color	file:
__str__	rvstruct.py	/^        def __str__(self):$/;"	f	function:Color.__repr__	file:
Instances	rvstruct.py	/^class Instances:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:Instances
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:Instances	file:
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Instances
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Instances
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:Instances
Instance	rvstruct.py	/^class Instance:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:Instance
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:Instance	file:
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Instance
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Instance
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:Instance
PosNodes	rvstruct.py	/^class PosNodes:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:PosNodes
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:PosNodes
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:PosNodes
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:PosNodes	file:
PosNode	rvstruct.py	/^class PosNode:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:PosNode
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:PosNode
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:PosNode
__repr__	rvstruct.py	/^    def __repr__(self):$/;"	m	class:PosNode	file:
NCP	rvstruct.py	/^class NCP:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:NCP
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:NCP
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:NCP
generate_lookup_grid	rvstruct.py	/^    def generate_lookup_grid(self, grid_size=None):$/;"	m	class:NCP
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:NCP
Polyhedron	rvstruct.py	/^class Polyhedron:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:Polyhedron
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Polyhedron
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Polyhedron
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:Polyhedron
Plane	rvstruct.py	/^class Plane:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None, n=None, d=None):$/;"	m	class:Plane
contains_vertex	rvstruct.py	/^    def contains_vertex(self, vertex):$/;"	m	class:Plane
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Plane
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Plane
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:Plane
LookupGrid	rvstruct.py	/^class LookupGrid:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:LookupGrid
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:LookupGrid
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:LookupGrid
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:LookupGrid
LookupList	rvstruct.py	/^class LookupList:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:LookupList
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:LookupList
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:LookupList
as_dict	rvstruct.py	/^    def as_dict(self):$/;"	m	class:LookupList
Hull	rvstruct.py	/^class Hull:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:Hull
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Hull
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Hull
ConvexHull	rvstruct.py	/^class ConvexHull:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:ConvexHull
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:ConvexHull
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:ConvexHull
Edge	rvstruct.py	/^class Edge:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:Edge
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Edge
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Edge
__getitem__	rvstruct.py	/^    def __getitem__(self, i):$/;"	m	class:Edge	file:
Interior	rvstruct.py	/^class Interior:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:Interior
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Interior
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Interior
Sphere	rvstruct.py	/^class Sphere:$/;"	c
__init__	rvstruct.py	/^    def __init__(self, file=None):$/;"	m	class:Sphere
read	rvstruct.py	/^    def read(self, file):$/;"	m	class:Sphere
write	rvstruct.py	/^    def write(self, file):$/;"	m	class:Sphere
dic	common.py	/^    dic = {}  # dict to hold the mesh for edit mode$/;"	v
bpy	common.py	/^import bpy$/;"	i
bmesh	common.py	/^import bmesh$/;"	i
os	common.py	/^import os$/;"	i
sqrt	common.py	/^from math import sqrt$/;"	i
Color	common.py	/^from mathutils import Color, Matrix$/;"	i
Matrix	common.py	/^from mathutils import Color, Matrix$/;"	i
read_parameters	common.py	/^from .carinfo import read_parameters$/;"	i
ERRORS	common.py	/^ERRORS = {}  # Dictionary that holds error messages$/;"	v
PARAMETERS	common.py	/^PARAMETERS = {}  # Glocal dict to hold parameters$/;"	v
DEBUG	common.py	/^DEBUG = True$/;"	v
SCALE	common.py	/^SCALE = 0.01$/;"	v
FACE_QUAD	common.py	/^FACE_QUAD = 1               # 0x1$/;"	v
FACE_DOUBLE	common.py	/^FACE_DOUBLE = 2             # 0x2$/;"	v
FACE_TRANSLUCENT	common.py	/^FACE_TRANSLUCENT = 4        # 0x4$/;"	v
FACE_MIRROR	common.py	/^FACE_MIRROR = 128           # 0x80$/;"	v
FACE_TRANSL_TYPE	common.py	/^FACE_TRANSL_TYPE = 256      # 0x100$/;"	v
FACE_TEXANIM	common.py	/^FACE_TEXANIM = 512          # 0x200$/;"	v
FACE_NOENV	common.py	/^FACE_NOENV = 1024           # 0x400$/;"	v
FACE_ENV	common.py	/^FACE_ENV = 2048             # 0x800$/;"	v
FACE_CLOTH	common.py	/^FACE_CLOTH = 4096           # 0x1000$/;"	v
FACE_SKIP	common.py	/^FACE_SKIP = 8192            # 0x2000$/;"	v
NCP_QUAD	common.py	/^NCP_QUAD = 1$/;"	v
NCP_DOUBLE	common.py	/^NCP_DOUBLE = 2$/;"	v
NCP_OBJECT_ONLY	common.py	/^NCP_OBJECT_ONLY = 4$/;"	v
NCP_CAMERA_ONLY	common.py	/^NCP_CAMERA_ONLY = 8$/;"	v
NCP_NON_PLANAR	common.py	/^NCP_NON_PLANAR = 16$/;"	v
NCP_NO_SKID	common.py	/^NCP_NO_SKID = 32$/;"	v
NCP_OIL	common.py	/^NCP_OIL = 64$/;"	v
NCP_NOCOLL	common.py	/^NCP_NOCOLL = 128$/;"	v
FIN_ENV	common.py	/^FIN_ENV = 1$/;"	v
FIN_HIDE	common.py	/^FIN_HIDE = 2$/;"	v
FIN_NO_MIRROR	common.py	/^FIN_NO_MIRROR = 4$/;"	v
FIN_NO_LIGHTS	common.py	/^FIN_NO_LIGHTS = 8$/;"	v
FIN_SET_MODEL_RGB	common.py	/^FIN_SET_MODEL_RGB = 16$/;"	v
FIN_NO_OBJECT_COLLISION	common.py	/^FIN_NO_OBJECT_COLLISION = 32$/;"	v
FIN_NO_CAMERA_COLLISION	common.py	/^FIN_NO_CAMERA_COLLISION = 64$/;"	v
NCP_PROP_MASK	common.py	/^NCP_PROP_MASK = ($/;"	v
FACE_PROP_MASK	common.py	/^FACE_PROP_MASK = ($/;"	v
FACE_PROPS	common.py	/^FACE_PROPS = [$/;"	v
NCP_PROPS	common.py	/^NCP_PROPS = [$/;"	v
MATERIALS	common.py	/^MATERIALS = ($/;"	v
dprint	common.py	/^def dprint(*str):$/;"	f
rgb	common.py	/^def rgb(r, g, b):$/;"	f
COLORS	common.py	/^COLORS = ($/;"	v
COL_CUBE	common.py	/^COL_CUBE = Color(rgb(180, 20, 0))$/;"	v
COL_BBOX	common.py	/^COL_BBOX = Color(rgb(0, 0, 40))$/;"	v
COL_BCUBE	common.py	/^COL_BCUBE = Color(rgb(0, 180, 20))$/;"	v
FORMAT_UNK	common.py	/^FORMAT_UNK = -1$/;"	v
FORMAT_BMP	common.py	/^FORMAT_BMP = 0$/;"	v
FORMAT_CAR	common.py	/^FORMAT_CAR = 1$/;"	v
FORMAT_TA_CSV	common.py	/^FORMAT_TA_CSV = 2$/;"	v
FORMAT_FIN	common.py	/^FORMAT_FIN = 3$/;"	v
FORMAT_FOB	common.py	/^FORMAT_FOB = 4$/;"	v
FORMAT_HUL	common.py	/^FORMAT_HUL = 5$/;"	v
FORMAT_LIT	common.py	/^FORMAT_LIT = 6$/;"	v
FORMAT_NCP	common.py	/^FORMAT_NCP = 7$/;"	v
FORMAT_PRM	common.py	/^FORMAT_PRM = 8$/;"	v
FORMAT_RIM	common.py	/^FORMAT_RIM = 9$/;"	v
FORMAT_RTU	common.py	/^FORMAT_RTU = 10$/;"	v
FORMAT_TAZ	common.py	/^FORMAT_TAZ = 11$/;"	v
FORMAT_VIS	common.py	/^FORMAT_VIS = 12$/;"	v
FORMAT_W	common.py	/^FORMAT_W = 13$/;"	v
FORMATS	common.py	/^FORMATS = {$/;"	v
BAKE_LIGHTS	common.py	/^BAKE_LIGHTS = [$/;"	v
BAKE_LIGHT_ORIENTATIONS	common.py	/^BAKE_LIGHT_ORIENTATIONS = [$/;"	v
BAKE_SHADOW_METHODS	common.py	/^BAKE_SHADOW_METHODS = [$/;"	v
TA_CSV_HEADER	common.py	/^TA_CSV_HEADER = "Slot,Frame,Texture,Delay,U0,V0,U1,V1,U2,V2,U3,V3"$/;"	v
to_blender_axis	common.py	/^def to_blender_axis(vec):$/;"	f
to_blender_coord	common.py	/^def to_blender_coord(vec):$/;"	f
to_blender_scale	common.py	/^def to_blender_scale(num):$/;"	f
to_revolt_coord	common.py	/^def to_revolt_coord(vec):$/;"	f
to_revolt_axis	common.py	/^def to_revolt_axis(vec):$/;"	f
to_revolt_scale	common.py	/^def to_revolt_scale(num):$/;"	f
to_trans_matrix	common.py	/^def to_trans_matrix(matrix):$/;"	f
to_or_matrix	common.py	/^def to_or_matrix(matrix):$/;"	f
rvbbox_from_bm	common.py	/^def rvbbox_from_bm(bm):$/;"	f
rvbbox_from_verts	common.py	/^def rvbbox_from_verts(verts):$/;"	f
get_distance	common.py	/^def get_distance(v1, v2):$/;"	f
center_from_rvbbox	common.py	/^def center_from_rvbbox(rvbbox):$/;"	f
radius_from_bmesh	common.py	/^def radius_from_bmesh(bm, center):$/;"	f
reverse_quad	common.py	/^def reverse_quad(quad, tri=False):$/;"	f
texture_to_int	common.py	/^def texture_to_int(string):$/;"	f
create_material	common.py	/^def create_material(name, diffuse, alpha):$/;"	f
get_active_face	common.py	/^def get_active_face(bm):$/;"	f
get_edit_bmesh	common.py	/^def get_edit_bmesh(obj):$/;"	f
objects_to_bmesh	common.py	/^def objects_to_bmesh(objs, transform=True):$/;"	f
DialogOperator	common.py	/^class DialogOperator(bpy.types.Operator):$/;"	c
bl_idname	common.py	/^    bl_idname = "revolt.dialog"$/;"	v	class:DialogOperator
bl_label	common.py	/^    bl_label = "Re-Volt Add-On Notification"$/;"	v	class:DialogOperator
execute	common.py	/^    def execute(self, context):$/;"	m	class:DialogOperator
invoke	common.py	/^    def invoke(self, context, event):$/;"	m	class:DialogOperator
draw	common.py	/^    def draw(self, context):$/;"	m	class:DialogOperator
msg_box	common.py	/^def msg_box(message, icon="INFO"):$/;"	f
queue_error	common.py	/^def queue_error(action, error_message):$/;"	f
get_errors	common.py	/^def get_errors():$/;"	f
redraw	common.py	/^def redraw():$/;"	f
redraw_3d	common.py	/^def redraw_3d():$/;"	f
redraw_uvedit	common.py	/^def redraw_uvedit():$/;"	f
enable_any_tex_mode	common.py	/^def enable_any_tex_mode(context):$/;"	f
enable_texture_mode	common.py	/^def enable_texture_mode():$/;"	f
enable_textured_solid_mode	common.py	/^def enable_textured_solid_mode():$/;"	f
texture_mode_enabled	common.py	/^def texture_mode_enabled():$/;"	f
get_all_lod	common.py	/^def get_all_lod(namestr):$/;"	f
triangulate_ngons	common.py	/^def triangulate_ngons(bm):$/;"	f
check_for_export	common.py	/^def check_for_export(obj):$/;"	f
get_texture_path	common.py	/^def get_texture_path(filepath, tex_num):$/;"	f
is_track_folder	common.py	/^def is_track_folder(path):$/;"	f
get_format	common.py	/^def get_format(fstr):$/;"	f
bpy	__init__.py	/^import bpy$/;"	i
os	__init__.py	/^import os$/;"	i
os	__init__.py	/^import os.path$/;"	i
path	__init__.py	/^import os.path$/;"	i
imp	__init__.py	/^import imp$/;"	i
persistent	__init__.py	/^from bpy.app.handlers import persistent  # For the scene update handler$/;"	i
For	__init__.py	/^from bpy.app.handlers import persistent  # For the scene update handler$/;"	i
the	__init__.py	/^from bpy.app.handlers import persistent  # For the scene update handler$/;"	i
scene	__init__.py	/^from bpy.app.handlers import persistent  # For the scene update handler$/;"	i
update	__init__.py	/^from bpy.app.handlers import persistent  # For the scene update handler$/;"	i
handler	__init__.py	/^from bpy.app.handlers import persistent  # For the scene update handler$/;"	i
bl_info	__init__.py	/^bl_info = {$/;"	v
edit_object_change_handler	__init__.py	/^def edit_object_change_handler(scene):$/;"	f
menu_func_import	__init__.py	/^def menu_func_import(self, context):$/;"	f
menu_func_export	__init__.py	/^def menu_func_export(self, context):$/;"	f
register	__init__.py	/^def register():$/;"	f
unregister	__init__.py	/^def unregister():$/;"	f
imp	tools.py	/^    import imp$/;"	i
bpy	tools.py	/^import bpy$/;"	i
bmesh	tools.py	/^import bmesh$/;"	i
mathutils	tools.py	/^import mathutils$/;"	i
pi	tools.py	/^from math import pi$/;"	i
time	tools.py	/^import time$/;"	i
common	tools.py	/^from . import common$/;"	i
bake_shadow	tools.py	/^def bake_shadow(self, context):$/;"	f
bake_vertex	tools.py	/^def bake_vertex(self, context):$/;"	f
rename_all_objects	tools.py	/^def rename_all_objects(self, context):$/;"	f
select_by_name	tools.py	/^def select_by_name(self, context):$/;"	f
select_by_data	tools.py	/^def select_by_data(self, context):$/;"	f
set_property_to_selected	tools.py	/^def set_property_to_selected(self, context, prop, value):$/;"	f
batch_bake	tools.py	/^def batch_bake(self, context):$/;"	f
bpy	operators.py	/^import bpy$/;"	i
time	operators.py	/^import time$/;"	i
subprocess	operators.py	/^import subprocess$/;"	i
tools	operators.py	/^from . import tools$/;"	i
ImportRV	operators.py	/^class ImportRV(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "import_scene.revolt"$/;"	v	class:ImportRV
bl_label	operators.py	/^    bl_label = "Import Re-Volt Files"$/;"	v	class:ImportRV
bl_description	operators.py	/^    bl_description = "Import Re-Volt game files"$/;"	v	class:ImportRV
filepath	operators.py	/^    filepath = bpy.props.StringProperty(subtype="FILE_PATH")$/;"	v	class:ImportRV
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ImportRV
prm_in	operators.py	/^            from . import prm_in$/;"	i
parameters_in	operators.py	/^            from . import parameters_in$/;"	i
ncp_in	operators.py	/^            from . import ncp_in$/;"	i
fin_in	operators.py	/^            from . import fin_in$/;"	i
hul_in	operators.py	/^            from . import hul_in$/;"	i
ta_csv_in	operators.py	/^            from . import ta_csv_in$/;"	i
w_in	operators.py	/^            from . import w_in$/;"	i
draw	operators.py	/^    def draw(self, context):$/;"	m	class:ImportRV
invoke	operators.py	/^    def invoke(self, context, event):$/;"	m	class:ImportRV
ExportRV	operators.py	/^class ExportRV(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "export_scene.revolt"$/;"	v	class:ExportRV
bl_label	operators.py	/^    bl_label = "Export Re-Volt Files"$/;"	v	class:ExportRV
bl_description	operators.py	/^    bl_description = "Export Re-Volt game files"$/;"	v	class:ExportRV
filepath	operators.py	/^    filepath = bpy.props.StringProperty(subtype="FILE_PATH")$/;"	v	class:ExportRV
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ExportRV
invoke	operators.py	/^    def invoke(self, context, event):$/;"	m	class:ExportRV
draw	operators.py	/^    def draw(self, context):$/;"	m	class:ExportRV
exec_export	operators.py	/^def exec_export(filepath, context):$/;"	f
prm_out	operators.py	/^            from . import prm_out$/;"	i
fin_out	operators.py	/^            from . import fin_out$/;"	i
ncp_out	operators.py	/^            from . import ncp_out$/;"	i
w_out	operators.py	/^            from . import w_out$/;"	i
ta_csv_out	operators.py	/^            from . import ta_csv_out$/;"	i
ButtonReExport	operators.py	/^class ButtonReExport(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "export_scene.revolt_redo"$/;"	v	class:ButtonReExport
bl_label	operators.py	/^    bl_label = "Re-Export"$/;"	v	class:ButtonReExport
bl_description	operators.py	/^    bl_description = "Redo the same export again"$/;"	v	class:ButtonReExport
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonReExport
ButtonSelectFaceProp	operators.py	/^class ButtonSelectFaceProp(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "faceprops.select"$/;"	v	class:ButtonSelectFaceProp
bl_label	operators.py	/^    bl_label = "sel"$/;"	v	class:ButtonSelectFaceProp
bl_description	operators.py	/^    bl_description = "Select or delesect all polygons with this property"$/;"	v	class:ButtonSelectFaceProp
prop	operators.py	/^    prop = bpy.props.IntProperty()$/;"	v	class:ButtonSelectFaceProp
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonSelectFaceProp
ButtonSelectNCPFaceProp	operators.py	/^class ButtonSelectNCPFaceProp(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "ncpfaceprops.select"$/;"	v	class:ButtonSelectNCPFaceProp
bl_label	operators.py	/^    bl_label = "sel"$/;"	v	class:ButtonSelectNCPFaceProp
bl_description	operators.py	/^    bl_description = "Select or delesect all polygons with this property"$/;"	v	class:ButtonSelectNCPFaceProp
prop	operators.py	/^    prop = bpy.props.IntProperty()$/;"	v	class:ButtonSelectNCPFaceProp
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonSelectNCPFaceProp
ButtonSelectNCPMaterial	operators.py	/^class ButtonSelectNCPMaterial(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "ncpmaterial.select"$/;"	v	class:ButtonSelectNCPMaterial
bl_label	operators.py	/^    bl_label = "sel"$/;"	v	class:ButtonSelectNCPMaterial
bl_description	operators.py	/^    bl_description = "Select all faces of the same material"$/;"	v	class:ButtonSelectNCPMaterial
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonSelectNCPMaterial
ButtonColorFromActive	operators.py	/^class ButtonColorFromActive(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "vertexcolor.copycolor"$/;"	v	class:ButtonColorFromActive
bl_label	operators.py	/^    bl_label = "Get Color"$/;"	v	class:ButtonColorFromActive
bl_description	operators.py	/^    bl_description = "Gets the color from the active face."$/;"	v	class:ButtonColorFromActive
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonColorFromActive
ButtonVertexColorSet	operators.py	/^class ButtonVertexColorSet(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "vertexcolor.set"$/;"	v	class:ButtonVertexColorSet
bl_label	operators.py	/^    bl_label = "Set Color"$/;"	v	class:ButtonVertexColorSet
bl_description	operators.py	/^    bl_description = "Apply color to selected faces"$/;"	v	class:ButtonVertexColorSet
number	operators.py	/^    number = bpy.props.IntProperty()$/;"	v	class:ButtonVertexColorSet
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonVertexColorSet
ButtonVertexColorCreateLayer	operators.py	/^class ButtonVertexColorCreateLayer(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "vertexcolor.create_layer"$/;"	v	class:ButtonVertexColorCreateLayer
bl_label	operators.py	/^    bl_label = "Create Vertex Color Layer"$/;"	v	class:ButtonVertexColorCreateLayer
bl_description	operators.py	/^    bl_description = "Creates a vertex color layer"$/;"	v	class:ButtonVertexColorCreateLayer
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonVertexColorCreateLayer
ButtonVertexAlphaCreateLayer	operators.py	/^class ButtonVertexAlphaCreateLayer(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "alphacolor.create_layer"$/;"	v	class:ButtonVertexAlphaCreateLayer
bl_label	operators.py	/^    bl_label = "Create Alpha Color Layer"$/;"	v	class:ButtonVertexAlphaCreateLayer
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonVertexAlphaCreateLayer
ButtonBakeShadow	operators.py	/^class ButtonBakeShadow(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "lighttools.bakeshadow"$/;"	v	class:ButtonBakeShadow
bl_label	operators.py	/^    bl_label = "Bake Shadow"$/;"	v	class:ButtonBakeShadow
bl_description	operators.py	/^    bl_description = "Creates a shadow plane beneath the selected object"$/;"	v	class:ButtonBakeShadow
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonBakeShadow
ButtonBakeLightToVertex	operators.py	/^class ButtonBakeLightToVertex(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "lighttools.bakevertex"$/;"	v	class:ButtonBakeLightToVertex
bl_label	operators.py	/^    bl_label = "Bake light"$/;"	v	class:ButtonBakeLightToVertex
bl_description	operators.py	/^    bl_description = "Bakes the light to the active vertex color layer"$/;"	v	class:ButtonBakeLightToVertex
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonBakeLightToVertex
ButtonEnableTextureMode	operators.py	/^class ButtonEnableTextureMode(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "helpers.enable_texture_mode"$/;"	v	class:ButtonEnableTextureMode
bl_label	operators.py	/^    bl_label = "Enable Texture Mode"$/;"	v	class:ButtonEnableTextureMode
bl_description	operators.py	/^    bl_description = "Enables texture mode so textures can be seen"$/;"	v	class:ButtonEnableTextureMode
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonEnableTextureMode
ButtonEnableTexturedSolidMode	operators.py	/^class ButtonEnableTexturedSolidMode(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "helpers.enable_textured_solid_mode"$/;"	v	class:ButtonEnableTexturedSolidMode
bl_label	operators.py	/^    bl_label = "Enable Textured Solid Mode"$/;"	v	class:ButtonEnableTexturedSolidMode
bl_description	operators.py	/^    bl_description = "Enables texture mode so textures can be seen"$/;"	v	class:ButtonEnableTexturedSolidMode
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonEnableTexturedSolidMode
ButtonRenameAllObjects	operators.py	/^class ButtonRenameAllObjects(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "helpers.rename_all_objects"$/;"	v	class:ButtonRenameAllObjects
bl_label	operators.py	/^    bl_label = "Rename selected"$/;"	v	class:ButtonRenameAllObjects
bl_description	operators.py	/^    bl_description = ($/;"	v	class:ButtonRenameAllObjects
execute	operators.py	/^    def execute(self, context):$/;"	m	class:ButtonRenameAllObjects
SelectByName	operators.py	/^class SelectByName(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "helpers.select_by_name"$/;"	v	class:SelectByName
bl_label	operators.py	/^    bl_label = "Select by name"$/;"	v	class:SelectByName
bl_description	operators.py	/^    bl_description = ($/;"	v	class:SelectByName
execute	operators.py	/^    def execute(self, context):$/;"	m	class:SelectByName
SelectByData	operators.py	/^class SelectByData(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "helpers.select_by_data"$/;"	v	class:SelectByData
bl_label	operators.py	/^    bl_label = "Select by data"$/;"	v	class:SelectByData
bl_description	operators.py	/^    bl_description = ($/;"	v	class:SelectByData
execute	operators.py	/^    def execute(self, context):$/;"	m	class:SelectByData
SetInstanceProperty	operators.py	/^class SetInstanceProperty(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "helpers.set_instance_property"$/;"	v	class:SetInstanceProperty
bl_label	operators.py	/^    bl_label = "Mark as Instance"$/;"	v	class:SetInstanceProperty
bl_description	operators.py	/^    bl_description = ($/;"	v	class:SetInstanceProperty
execute	operators.py	/^    def execute(self, context):$/;"	m	class:SetInstanceProperty
RemoveInstanceProperty	operators.py	/^class RemoveInstanceProperty(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "helpers.rem_instance_property"$/;"	v	class:RemoveInstanceProperty
bl_label	operators.py	/^    bl_label = "Remove Instance property"$/;"	v	class:RemoveInstanceProperty
bl_description	operators.py	/^    bl_description = ($/;"	v	class:RemoveInstanceProperty
execute	operators.py	/^    def execute(self, context):$/;"	m	class:RemoveInstanceProperty
BatchBake	operators.py	/^class BatchBake(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "helpers.batch_bake_model"$/;"	v	class:BatchBake
bl_label	operators.py	/^    bl_label = "Bake all selected"$/;"	v	class:BatchBake
bl_description	operators.py	/^    bl_description = ($/;"	v	class:BatchBake
execute	operators.py	/^    def execute(self, context):$/;"	m	class:BatchBake
LaunchRV	operators.py	/^class LaunchRV(bpy.types.Operator):$/;"	c
bl_idname	operators.py	/^    bl_idname = "helpers.launch_rv"$/;"	v	class:LaunchRV
bl_label	operators.py	/^    bl_label = "Launch RVGL"$/;"	v	class:LaunchRV
bl_description	operators.py	/^    bl_description = ($/;"	v	class:LaunchRV
execute	operators.py	/^    def execute(self, context):$/;"	m	class:LaunchRV
bpy	panels.py	/^import bpy$/;"	i
RevoltObjectPanel	panels.py	/^class RevoltObjectPanel(bpy.types.Panel):$/;"	c
bl_label	panels.py	/^    bl_label = "Re-Volt Object Properties"$/;"	v	class:RevoltObjectPanel
bl_space_type	panels.py	/^    bl_space_type = "PROPERTIES"$/;"	v	class:RevoltObjectPanel
bl_region_type	panels.py	/^    bl_region_type = "WINDOW"$/;"	v	class:RevoltObjectPanel
bl_context	panels.py	/^    bl_context = "object"$/;"	v	class:RevoltObjectPanel
bl_options	panels.py	/^    bl_options = {"HIDE_HEADER"}$/;"	v	class:RevoltObjectPanel
draw	panels.py	/^    def draw(self, context):$/;"	m	class:RevoltObjectPanel
RevoltScenePanel	panels.py	/^class RevoltScenePanel(bpy.types.Panel):$/;"	c
bl_label	panels.py	/^    bl_label = "Re-Volt .w Properties"$/;"	v	class:RevoltScenePanel
bl_space_type	panels.py	/^    bl_space_type = "PROPERTIES"$/;"	v	class:RevoltScenePanel
bl_region_type	panels.py	/^    bl_region_type = "WINDOW"$/;"	v	class:RevoltScenePanel
bl_context	panels.py	/^    bl_context = "scene"$/;"	v	class:RevoltScenePanel
bl_options	panels.py	/^    bl_options = {"HIDE_HEADER"}$/;"	v	class:RevoltScenePanel
draw	panels.py	/^    def draw(self, context):$/;"	m	class:RevoltScenePanel
EditModeHeader	panels.py	/^class EditModeHeader(bpy.types.Panel):$/;"	c
bl_label	panels.py	/^    bl_label = "Edit Mode Header"$/;"	v	class:EditModeHeader
bl_space_type	panels.py	/^    bl_space_type = "VIEW_3D"$/;"	v	class:EditModeHeader
bl_region_type	panels.py	/^    bl_region_type = "TOOLS"$/;"	v	class:EditModeHeader
bl_context	panels.py	/^    bl_context = "mesh_edit"$/;"	v	class:EditModeHeader
bl_category	panels.py	/^    bl_category = "Re-Volt"$/;"	v	class:EditModeHeader
bl_options	panels.py	/^    bl_options = {"HIDE_HEADER"}$/;"	v	class:EditModeHeader
draw	panels.py	/^    def draw(self, context):$/;"	m	class:EditModeHeader
RevoltIOToolPanel	panels.py	/^class RevoltIOToolPanel(bpy.types.Panel):$/;"	c
bl_label	panels.py	/^    bl_label = "Import\/Export"$/;"	v	class:RevoltIOToolPanel
bl_space_type	panels.py	/^    bl_space_type = "VIEW_3D"$/;"	v	class:RevoltIOToolPanel
bl_region_type	panels.py	/^    bl_region_type = "TOOLS"$/;"	v	class:RevoltIOToolPanel
bl_context	panels.py	/^    bl_context = "objectmode"$/;"	v	class:RevoltIOToolPanel
bl_category	panels.py	/^    bl_category = "Re-Volt"$/;"	v	class:RevoltIOToolPanel
bl_options	panels.py	/^    bl_options = {"HIDE_HEADER"}$/;"	v	class:RevoltIOToolPanel
draw	panels.py	/^    def draw(self, context):$/;"	m	class:RevoltIOToolPanel
RevoltHelpersPanelObj	panels.py	/^class RevoltHelpersPanelObj(bpy.types.Panel):$/;"	c
bl_label	panels.py	/^    bl_label = "Helpers"$/;"	v	class:RevoltHelpersPanelObj
bl_space_type	panels.py	/^    bl_space_type = "VIEW_3D"$/;"	v	class:RevoltHelpersPanelObj
bl_region_type	panels.py	/^    bl_region_type = "TOOLS"$/;"	v	class:RevoltHelpersPanelObj
bl_category	panels.py	/^    bl_category = "Re-Volt"$/;"	v	class:RevoltHelpersPanelObj
bl_context	panels.py	/^    bl_context = "objectmode"$/;"	v	class:RevoltHelpersPanelObj
bl_options	panels.py	/^    bl_options = {"DEFAULT_CLOSED"}$/;"	v	class:RevoltHelpersPanelObj
draw_header	panels.py	/^    def draw_header(self, context):$/;"	m	class:RevoltHelpersPanelObj
draw	panels.py	/^    def draw(self, context):$/;"	m	class:RevoltHelpersPanelObj
RevoltHelpersPanelMesh	panels.py	/^class RevoltHelpersPanelMesh(bpy.types.Panel):$/;"	c
bl_label	panels.py	/^    bl_label = "Helpers"$/;"	v	class:RevoltHelpersPanelMesh
bl_space_type	panels.py	/^    bl_space_type = "VIEW_3D"$/;"	v	class:RevoltHelpersPanelMesh
bl_region_type	panels.py	/^    bl_region_type = "TOOLS"$/;"	v	class:RevoltHelpersPanelMesh
bl_category	panels.py	/^    bl_category = "Re-Volt"$/;"	v	class:RevoltHelpersPanelMesh
bl_context	panels.py	/^    bl_context = "mesh_edit"$/;"	v	class:RevoltHelpersPanelMesh
bl_options	panels.py	/^    bl_options = {"DEFAULT_CLOSED"}$/;"	v	class:RevoltHelpersPanelMesh
draw_header	panels.py	/^    def draw_header(self, context):$/;"	m	class:RevoltHelpersPanelMesh
draw	panels.py	/^    def draw(self, context):$/;"	m	class:RevoltHelpersPanelMesh
RevoltFacePropertiesPanel	panels.py	/^class RevoltFacePropertiesPanel(bpy.types.Panel):$/;"	c
bl_label	panels.py	/^    bl_label = "Face Properties"$/;"	v	class:RevoltFacePropertiesPanel
bl_space_type	panels.py	/^    bl_space_type = "VIEW_3D"$/;"	v	class:RevoltFacePropertiesPanel
bl_region_type	panels.py	/^    bl_region_type = "TOOLS"$/;"	v	class:RevoltFacePropertiesPanel
bl_context	panels.py	/^    bl_context = "mesh_edit"$/;"	v	class:RevoltFacePropertiesPanel
bl_category	panels.py	/^    bl_category = "Re-Volt"$/;"	v	class:RevoltFacePropertiesPanel
selection	panels.py	/^    selection = None$/;"	v	class:RevoltFacePropertiesPanel
selected_face_count	panels.py	/^    selected_face_count = None$/;"	v	class:RevoltFacePropertiesPanel
draw_header	panels.py	/^    def draw_header(self, context):$/;"	m	class:RevoltFacePropertiesPanel
draw	panels.py	/^    def draw(self, context):$/;"	m	class:RevoltFacePropertiesPanel
prm_edit_panel	panels.py	/^def prm_edit_panel(self, context):$/;"	f
ncp_edit_panel	panels.py	/^def ncp_edit_panel(self, context):$/;"	f
RevoltVertexPanel	panels.py	/^class RevoltVertexPanel(bpy.types.Panel):$/;"	c
bl_label	panels.py	/^    bl_label = "Vertex Colors"$/;"	v	class:RevoltVertexPanel
bl_space_type	panels.py	/^    bl_space_type = "VIEW_3D"$/;"	v	class:RevoltVertexPanel
bl_region_type	panels.py	/^    bl_region_type = "TOOLS"$/;"	v	class:RevoltVertexPanel
bl_context	panels.py	/^    bl_context = "mesh_edit"$/;"	v	class:RevoltVertexPanel
bl_category	panels.py	/^    bl_category = "Re-Volt"$/;"	v	class:RevoltVertexPanel
selection	panels.py	/^    selection = None$/;"	v	class:RevoltVertexPanel
selected_face_count	panels.py	/^    selected_face_count = None$/;"	v	class:RevoltVertexPanel
draw_header	panels.py	/^    def draw_header(self, context):$/;"	m	class:RevoltVertexPanel
poll	panels.py	/^    def poll(self, context):$/;"	m	class:RevoltVertexPanel
draw	panels.py	/^    def draw(self, context):$/;"	m	class:RevoltVertexPanel
RevoltLightPanel	panels.py	/^class RevoltLightPanel(bpy.types.Panel):$/;"	c
bl_label	panels.py	/^    bl_label = "Light and Shadow"$/;"	v	class:RevoltLightPanel
bl_space_type	panels.py	/^    bl_space_type = "VIEW_3D"$/;"	v	class:RevoltLightPanel
bl_region_type	panels.py	/^    bl_region_type = "TOOLS"$/;"	v	class:RevoltLightPanel
bl_context	panels.py	/^    bl_context = "objectmode"$/;"	v	class:RevoltLightPanel
bl_category	panels.py	/^    bl_category = "Re-Volt"$/;"	v	class:RevoltLightPanel
poll	panels.py	/^    def poll(self, context):$/;"	m	class:RevoltLightPanel
draw_header	panels.py	/^    def draw_header(self, context):$/;"	m	class:RevoltLightPanel
draw	panels.py	/^    def draw(self, context):$/;"	m	class:RevoltLightPanel
RevoltInstancesPanel	panels.py	/^class RevoltInstancesPanel(bpy.types.Panel):$/;"	c
bl_label	panels.py	/^    bl_label = "Instances"$/;"	v	class:RevoltInstancesPanel
bl_space_type	panels.py	/^    bl_space_type = "VIEW_3D"$/;"	v	class:RevoltInstancesPanel
bl_region_type	panels.py	/^    bl_region_type = "TOOLS"$/;"	v	class:RevoltInstancesPanel
bl_context	panels.py	/^    bl_context = "objectmode"$/;"	v	class:RevoltInstancesPanel
bl_category	panels.py	/^    bl_category = "Re-Volt"$/;"	v	class:RevoltInstancesPanel
bl_options	panels.py	/^    bl_options = {"DEFAULT_CLOSED"}$/;"	v	class:RevoltInstancesPanel
draw_header	panels.py	/^    def draw_header(self, context):$/;"	m	class:RevoltInstancesPanel
draw	panels.py	/^    def draw(self, context):$/;"	m	class:RevoltInstancesPanel
MenuAnimModes	panels.py	/^class MenuAnimModes(bpy.types.Menu):$/;"	c
bl_idname	panels.py	/^    bl_idname = "texanim.modemenu"$/;"	v	class:MenuAnimModes
bl_label	panels.py	/^    bl_label = "Animation Mode"$/;"	v	class:MenuAnimModes
draw	panels.py	/^    def draw(self, context):$/;"	m	class:MenuAnimModes
RevoltAnimationPanel	panels.py	/^class RevoltAnimationPanel(bpy.types.Panel):$/;"	c
bl_label	panels.py	/^    bl_label = "Texture Animation (.w)"$/;"	v	class:RevoltAnimationPanel
bl_space_type	panels.py	/^    bl_space_type = "VIEW_3D"$/;"	v	class:RevoltAnimationPanel
bl_region_type	panels.py	/^    bl_region_type = "TOOLS"$/;"	v	class:RevoltAnimationPanel
bl_context	panels.py	/^    bl_context = "mesh_edit"$/;"	v	class:RevoltAnimationPanel
bl_category	panels.py	/^    bl_category = "Re-Volt"$/;"	v	class:RevoltAnimationPanel
bl_options	panels.py	/^    bl_options = {"DEFAULT_CLOSED"}$/;"	v	class:RevoltAnimationPanel
poll	panels.py	/^    def poll(self, context):$/;"	m	class:RevoltAnimationPanel
draw_header	panels.py	/^    def draw_header(self, context):$/;"	m	class:RevoltAnimationPanel
draw	panels.py	/^    def draw(self, context):$/;"	m	class:RevoltAnimationPanel
RevoltSettingsPanel	panels.py	/^class RevoltSettingsPanel(bpy.types.Panel):$/;"	c
bl_label	panels.py	/^    bl_label = "Add-On Settings"$/;"	v	class:RevoltSettingsPanel
bl_space_type	panels.py	/^    bl_space_type = "VIEW_3D"$/;"	v	class:RevoltSettingsPanel
bl_region_type	panels.py	/^    bl_region_type = "TOOLS"$/;"	v	class:RevoltSettingsPanel
bl_context	panels.py	/^    bl_context = "objectmode"$/;"	v	class:RevoltSettingsPanel
bl_category	panels.py	/^    bl_category = "Re-Volt"$/;"	v	class:RevoltSettingsPanel
bl_options	panels.py	/^    bl_options = {"DEFAULT_CLOSED"}$/;"	v	class:RevoltSettingsPanel
draw_header	panels.py	/^    def draw_header(self, context):$/;"	m	class:RevoltSettingsPanel
draw	panels.py	/^    def draw(self, context):$/;"	m	class:RevoltSettingsPanel
widget_texture_mode	panels.py	/^def widget_texture_mode(self):$/;"	f
widget_vertex_color_channel	panels.py	/^def widget_vertex_color_channel(self, obj):$/;"	f
imp	ncp_out.py	/^    import imp$/;"	i
os	ncp_out.py	/^import os$/;"	i
bpy	ncp_out.py	/^import bpy$/;"	i
bmesh	ncp_out.py	/^import bmesh$/;"	i
ceil	ncp_out.py	/^from math import ceil$/;"	i
Color	ncp_out.py	/^from mathutils import Color, Matrix$/;"	i
Matrix	ncp_out.py	/^from mathutils import Color, Matrix$/;"	i
common	ncp_out.py	/^from . import common$/;"	i
rvstruct	ncp_out.py	/^from . import rvstruct$/;"	i
export_file	ncp_out.py	/^def export_file(filepath, scene):$/;"	f
